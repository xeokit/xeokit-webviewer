{
  "title": "Build and view a box-shaped SceneModel",
  "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that contains a SceneObject, a SceneMesh, and a SceneGeometry that defines the shape of the box.",
  "articles": [
    "sceneModelBuildBox"
  ],
  "id": "SceneModel_build_box",
  "type": "example",
  "visualTest": true,
  "tutorial": true,
  "template": "basicPage",
  "steps": [
    "Import the modules we need",
    "Create a Scene to hold geometry and materials",
    "Create a WebGLRenderer to use the browser's WebGL API for 3D graphics",
    "Create a Viewer that views our Scene using the WebGLRenderer. Note that the\nScene and WebGLRenderer can only be attached to one Viewer at a time.",
    "Ignore the DemoHelper",
    "Create a single View that renders to a canvas in the page",
    "Position the View's Camera to look at the origin of the coordinate system",
    "Default is [0,0,10]\nDefault\nDefault",
    "Add a CameraControl to the View to control its Camera with mouse and touchpad input",
    "Within the Scene, create a SceneModel to hold geometry and materials for our model",
    "Create a SceneGeometry that defines the shape of the box",
    "Define the SceneGeometry vertices - eight for our box, each\none spanning three array elements for X,Y and Z",
    "v0-v1-v2-v3 front",
    "v0-v3-v4-v1 right",
    "v0-v1-v6-v1 top",
    "v1-v6-v7-v2 left",
    "v7-v4-v3-v2 bottom",
    "v4-v7-v6-v1 back",
    "Define the SceneGeometry indices - these organise the\npositions coordinates\ninto geometric primitives in accordance\nwith the TrianglesPrimitive parameter,\nin this case a set of three indices\nfor each triangle. Note that each triangle is specified\nin counter-clockwise winding order.",
    "Front",
    "Right",
    "Top",
    "Left",
    "Bottom",
    "Back",
    "Create a red SceneMesh that instances our SceneGeometry",
    "Default\nDefault\nDefault\nDefault is [1,1,1]",
    "Create a SceneObject that aggregates our SceneMesh",
    "Build the SceneModel, causing the red box to appear in the View's canvas.",
    "At this point, the View will contain a single ViewObject that has the same\nID as the SceneObject. Through the ViewObject, we can now update the\nappearance of the box in that View.",
    "Ignore the DemoHelper"
  ]
}