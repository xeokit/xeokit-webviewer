{
  "title": "Creating a Viewer with multiple Views and light sources",
  "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. For each View, configure autoLayers=false. In the first and second Views, create a ViewLayer with ID \"viewlayer1\". In the third View, create a ViewLayer with ID \"viewLayer2\". In the Scene, create a SceneModel assigned to \"viewLayer1\" and use loadXGF to load an XGF model into it. In the Scene, create another SceneModel assigned to \"viewLayer2\" and use loadGLTF to load a glTF model into it. Thanks to the masking effect of the ViewLayers, the Viewer then draws the XGF model in the first two Views, and the glTF model in the third View.",
  "id": "ViewLayer_multiView_lighting",
  "type": "example",
  "steps": [
    "Import the SDK from a bundle built for these examples",
    "Create a Scene to hold model geometry and materials",
    "Create a Data to hold semantic information about the model",
    "Create a WebGLRenderer to use the browser's WebGL API for rendering",
    "Ignore the DemoHelper",
    "Create a Viewer which uses the WebGLRenderer to render the Scene",
    "Create the first View. This View has a perspective projection, looking at the center of the model along a diagonal axis.",
    "Replace the first View's light sources with our own AmbientLight and DirLight instances.",
    "Attach a CameraControl to the first View, to control the Camera with keyboard, mouse and touch input.",
    "Create the second View. This View has a perspective projection, and is looking\nat the denter of the model from along a diagonal axis.",
    "Add a CameraControl to the second View.",
    "Replace the second View's light sources with our own AmbientLight and DirLight instances.",
    "Create the third View. This View has a perspective projection, and is also looking\nat the denter of the model from along a diagonal axis.",
    "Add a CameraControl to the third View.",
    "Replace the third View's light sources with our own AmbientLight and DirLight instances.",
    "Create a SceneModel and use loadGLTF load a building model into it.",
    "Build the SceneModel.\nEach View will now contain its own ViewObject for each SceneObject in the SceneModel, illuminated\nby its own custom light sources. Via those ViewObjects, we can then control the appearance of\neach of our model objects independently in each View."
  ]
}