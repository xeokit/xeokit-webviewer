{
  "pages": {
    "SceneModel_DataModel_build_table": {
      "title": "Building and viewing a SceneModel and a DataModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View, along with a Data object. In the Scene, build a simple kitchen table SceneModel containing five SceneObjects, to represent the table top and four legs. In the Data object, build a DataModel that contains five DataObjects, which attach semantic information to the SceneModel and its SceneObjects.",
      "id": "SceneModel_DataModel_build_table",
      "type": "example"
    },
    "SceneModel_DataModel_fromParams_IfcOpenHouse4": {
      "title": "Loading an IFC model from SceneModelParams and DataModelParams into a SceneModel and a DataModel",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and one View. Create a Data. In the Scene, create a SceneModel. In the Data, create a DataModel. Use SceneModel's fromParams method to load a SceneModelParams. Use DataModel's fromParams method to load a DataModelParams. The Viewer then draws the IFC model in the View's canvas.",
      "id": "SceneModel_DataModel_fromParams_IfcOpenHouse4",
      "type": "example"
    },
    "SceneModel_build_box": {
      "title": "Build and view a box-shaped SceneModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that contains a SceneObject, a SceneMesh, and a SceneGeometry that defines the shape of the box.",
      "articles": [
        "sceneModelBuildBox"
      ],
      "id": "SceneModel_build_box",
      "type": "example"
    },
    "SceneModel_build_box_compressedGeometry": {
      "title": "Build and view a box-shaped SceneModel, created with compressed geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, create a SceneModel. In the SceneModel, create a box-shaped SceneGeometry from SceneGeometryCompressedParams. In the SceneModel, create a SceneMesh that references the SceneGeometry, and a SceneObject that references the SceneMesh. Build the SceneModel. The Viewer then draws the box in the View.",
      "template": "basicPage",
      "tutorials": [
        "sceneModelBuildBox"
      ],
      "id": "SceneModel_build_box_compressedGeometry",
      "type": "example"
    },
    "SceneModel_build_geometries": {
      "title": "Build and view a SceneModel containing various geometry types",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a set of SceneMeshs that each have a SceneGeometry. Each SceneGeometry represents a different type of geometric primitive supported by xeokit.",
      "id": "SceneModel_build_geometries",
      "type": "example"
    },
    "SceneModel_build_lines": {
      "title": "Build and view a SceneModel containing line geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with five SceneObjects and five SceneMeshs, which share a single SceneGeometry that contains lines primitives.",
      "template": "basicPage",
      "id": "SceneModel_build_lines",
      "type": "example"
    },
    "SceneModel_build_points": {
      "title": "Build and view a SceneModel containing points geometry",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry with points primitives.",
      "id": "SceneModel_build_points",
      "type": "example"
    },
    "SceneModel_build_table": {
      "title": "Build and view a table-shaped SceneModel",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel that represents a simple kitchen table. The SceneModel then has five SceneObjects, five SceneMeshs, and one box-shaped SceneGeometry containing triangle primitives.",
      "id": "SceneModel_build_table",
      "type": "example"
    },
    "SceneModel_build_triangle": {
      "title": "Build and view a SceneModel containing a single 3D triangle",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that contains a single triangle.",
      "id": "SceneModel_build_triangle",
      "type": "example"
    },
    "SceneModel_build_triangle_checkErrors": {
      "title": "Building and viewing a SceneModel containing a 3D triangle, while checking for errors",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that contains a single triangle. Check for errors after each step.",
      "id": "SceneModel_build_triangle_checkErrors",
      "type": "example"
    },
    "SceneModel_fromParams_box": {
      "title": "Building and viewing a box-shaped SceneModel, from JSON",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and one View. In the Scene, create a SceneModel. Use SceneModel's fromParams method to load a SceneModelParams into the SceneModel. The Viewer then draws the SceneModel in the View's canvas.",
      "id": "SceneModel_fromParams_box",
      "type": "example"
    },
    "SceneModel_fromParams_box_compressedGeometry": {
      "title": "Building and viewing a box-shaped SceneModel, from JSON, using compressed geometry",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and one View. In the Scene, create a SceneModel. Use SceneModel's fromParams method to load a SceneModelParams containing compressed geometry into the SceneModel. The Viewer then draws the SceneModel in the View's canvas.",
      "id": "SceneModel_fromParams_box_compressedGeometry",
      "type": "example"
    },
    "SceneModel_fromParams_geometries": {
      "title": "Building and viewing a SceneModel containing various geometry types, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel from a SceneModelParams, containing a set of SceneMeshs that represent various geometric primitives.",
      "id": "SceneModel_fromParams_geometries",
      "type": "example"
    },
    "SceneModel_fromParams_streamable_geometries": {
      "title": "Building and viewing a SceneModel containing various geometry types, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel from a SceneModelParams, containing a set of SceneMeshs that represent various geometric primitives.",
      "id": "SceneModel_fromParams_streamable_geometries",
      "type": "example"
    },
    "SceneModel_fromParams_table": {
      "title": "Building and viewing a table-shaped SceneModel, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel from SceneModelParams that represents a simple kitchen table. The SceneModel has five SceneObjects, five SceneMeshs, and one box-shaped SceneGeometry containing triangle primitives.",
      "id": "SceneModel_fromParams_table",
      "type": "example"
    },
    "SceneModel_fromParams_triangle": {
      "title": "Building and viewing a simple SceneModel, from JSON",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel from SceneModelParams that contains a single triangle. The SceneModel has one SceneObject, one SceneMesh, and one SceneGeometry, which contains the triangle geometry.",
      "id": "SceneModel_fromParams_triangle",
      "type": "example"
    },
    "SceneModel_retainedFalse": {
      "title": "Building and viewing a SceneModel, without retaining geometry in Browser memory",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel containing a table-shaped model. Configure the SceneModel with retained: false, which causes it to not retain SceneObject, SceneMesh and SceneGeometrys in browser memory, which results in a smaller memory footprint. The Viewer then draws the model in the View's canvas, while the model's geometry and materials reside entirely in GPU memory.",
      "id": "SceneModel_retainedFalse",
      "type": "example"
    },
    "TreeView_AggregationHierarchy": {
      "title": "Using a TreeView configured with AggregationHierarchy",
      "summary": "",
      "id": "TreeView_AggregationHierarchy",
      "type": "example"
    },
    "TreeView_GroupsHierarchy": {
      "title": "Using a TreeView configured with GroupsHierarchy",
      "summary": "",
      "id": "TreeView_GroupsHierarchy",
      "type": "example"
    },
    "TreeView_TypesHierarchy": {
      "title": "Using a TreeView configured with TypesHierarchy",
      "summary": "",
      "id": "TreeView_TypesHierarchy",
      "type": "example"
    },
    "ViewLayer_auto": {
      "title": "Creating a Viewer with automatic ViewLayers",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and one View. For the View, configure autoLayers=true. In the Scene, create a SceneModel assigned to \"modelLayer\" and use loadGLTF to load a model into it. In the Scene, also create a SceneModel assigned to \"gridLayer\" and use buildGridGeometry to build a grid helper object within it. The View then contains two ViewsLayers, \"modelLayer\" containing the model, and \"gridLayer\" containing the grid.",
      "id": "ViewLayer_auto",
      "type": "example"
    },
    "ViewLayer_manual": {
      "title": "Creating a Viewer with manual ViewLayers",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and one View. For the View, configure autoLayers=false. In the View, create two ViewLayers; \"modelLayer\" and \"gridLayer\". In the Scene, create a SceneModel assigned to \"modelLayer\" and use loadGLTF to load a model into it. In the Scene, also create a SceneModel assigned to \"gridLayer\" and use buildGridGeometry to build a grid helper object within it. The View then contains two ViewsLayers, \"modelLayer\" containing the model, and \"gridLayer\" containing the grid.",
      "id": "ViewLayer_manual",
      "type": "example"
    },
    "ViewLayer_multiView": {
      "title": "Creating a Viewer with multiple Views and ViewLayers",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. For each View, configure autoLayers=false. In the first and second Views, create two ViewLayers; \"modelLayer\" and \"gridLayer\". In the third View, create just a \"modelLayer\" ViewLayer. In the Scene, create a SceneModel assigned to \"modelLayer\" and use loadGLTF to load a model into it. In the Scene, create a SceneModel assigned to \"gridLayer\" and use buildGridGeometry to build a grid helper object within it. Thanks to the masking effect of the ViewLayers, the Viewer then draws the model in all three Views, but only draws the grid in the first and second Views.",
      "id": "ViewLayer_multiView",
      "type": "example"
    },
    "ViewLayer_multiView_multiModels": {
      "title": "Creating a Viewer with multiple Views and ViewLayers",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. For each View, configure autoLayers=false. In the first and second Views, create a ViewLayer with ID \"viewlayer1\". In the third View, create a ViewLayer with ID \"viewLayer2\". In the Scene, create a SceneModel assigned to \"viewLayer1\" and use loadXGF to load an XGF model into it. In the Scene, create another SceneModel assigned to \"viewLayer2\" and use loadGLTF to load a glTF model into it. Thanks to the masking effect of the ViewLayers, the Viewer then draws the XGF model in the first two Views, and the glTF model in the third View.",
      "id": "ViewLayer_multiView_multiModels",
      "type": "example"
    },
    "View_multiView_SceneModel_build_table": {
      "title": "Building a table-shaped SceneModel in multiple Views",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. In the Scene, build a SceneModel containing a simple table-shaped model. The Viewer then draws the model in each View's canvas. Meanwhile, orbit the primary View's Camera.",
      "id": "View_multiView_SceneModel_build_table",
      "type": "example"
    },
    "View_multiView_drawBox": {
      "title": "Building a box-shaped SceneModel in multiple Views",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views. In the Scene, build a SceneModel containing a simple box-shaped triangle mesh. The Viewer then draws the box in each View's canvas. While this is happening, orbit each View's Camera and animate the colors of the object in the main View.",
      "id": "View_multiView_drawBox",
      "type": "example"
    },
    "View_multiView_loadWebIFC": {
      "title": "Viewing an IFC model in multiple Views",
      "summary": "In this example, we create a Viewer configured with a WebGLRenderer, a Scene, and three Views, along with a Data. In the Scene, we create a SceneModel, and in the Data we create a DataModel. Then we use loadWebIFC to load an IFC file into the SceneModel and DataModel. The Viewer then draws the IFC model in each View's canvas.",
      "models": [
        "IfcOpenHouse4/ifc"
      ],
      "id": "View_multiView_loadWebIFC",
      "type": "example"
    },
    "View_multiView_renderModes": {
      "title": "Viewing an IFC model in multiple Views, with different render modes",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene, and three Views, along with a Data. In the Scene, we create a SceneModel, and in the Data we create a DataModel. Then we load JSON into the SceneModel and DataModel. The Viewer then draws the model in each View's canvas. We also set the renderMode of the first View to QualityRender and the other two Views to FastRender.",
      "id": "View_multiView_renderModes",
      "type": "example"
    },
    "View_worldAxis_SceneModel": {
      "title": "Viewing a SceneModel with +Z configured as up",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene and a View. Configure the View's 3D coordinate system to use +Z as the direction of 'up'. In the Scene, build a SceneModel that represents a simple kitchen table. The Viewer then draws the SceneModel in the View.",
      "id": "View_worldAxis_SceneModel",
      "type": "example"
    },
    "View_worldAxis_loadCityJSON": {
      "title": "Viewing a CityJSON model with +Z configured as up direction",
      "summary": "Create a Viewer configured with a WebGLRenderer, a Scene and a View. Create a Data. Within the View, configure its Camera's worldAxis to effectively make +Z the direction of 'up' within the View's 3D World coordinate system. In the Scene, create a SceneModel, and in the Data create a DataModel. Then use loadCityJSON to load a CityJSON file into the SceneModel and DataModel. The Viewer then draws the CityJSON model in the View.",
      "models": [
        "LoD3_Railway/cityjson"
      ],
      "id": "View_worldAxis_loadCityJSON",
      "type": "example"
    },
    "Viewer_drawTriangle": {
      "title": "Building and viewing a SceneModel containing a single 3D triangle",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle.",
      "id": "Viewer_drawTriangle",
      "type": "example"
    },
    "Viewer_drawTriangle_checkErrors": {
      "title": "Building and viewing a SceneModel containing a 3D triangle, while checking for errors",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene and one View. In the Scene, build a SceneModel with a SceneObject, a SceneMesh, and a SceneGeometry that describes a single triangle. Check for errors after each step.",
      "id": "Viewer_drawTriangle_checkErrors",
      "type": "example"
    },
    "Viewer_drawTriangle_getEvents": {
      "title": "Drawing a triangle, logging all events",
      "summary": "Create a Viewer configured with a WebGLRenderer and a Scene. Then build a SceneModel with a simple triangle geometry, while logging all events fired by the Viewer.",
      "id": "Viewer_drawTriangle_getEvents",
      "type": "example"
    },
    "Viewer_fromParams": {
      "title": "Configuring a Viewer with ViewerParams; Creating a new View",
      "summary": "Create a Viewer with a WebGLRenderer and a Scene, but no Views. Within the Scene, create a SceneModel that contains a single 3D triangle. Configure the Viewer with the given ViewerParams, which contains one ViewParams. The Viewer then creates itself a View using those ViewParams.",
      "id": "Viewer_fromParams",
      "type": "example"
    },
    "Viewer_fromParams_existingView": {
      "title": "Configuring a Viewer with ViewerParams; Updating a pre-existing View",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View. Within the Scene, build a SceneModel that contains a single 3D triangle. Configure the Viewer with the given ViewerParams, which have a ViewParams with the same ID as the View. The View then receives whatever updated properties are provided in the ViewParams.",
      "id": "Viewer_fromParams_existingView",
      "type": "example"
    },
    "Viewer_getCapabilities": {
      "title": "Querying Viewer capabilities",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View. Within the Scene, build a SceneModel that contains a single 3D triangle. Query the Capabilities of the Viewer.",
      "id": "Viewer_getCapabilities",
      "type": "example"
    },
    "Viewer_toParams": {
      "title": "Saving a Viewer Configuration to ViewParams",
      "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View. Within the Scene, build a SceneModel that contains a single 3D triangle. Get the Viewer's current configuration as a ViewerParams. Stringify and log the ViewParams to the console. Using the ViewerParams, we can then create a second Viewer, that has exact same configuration as our first Viewer.",
      "id": "Viewer_toParams",
      "type": "example"
    }
  }
}
