{
  "title": "Building and viewing a SceneModel and a DataModel",
  "summary": "Create a Viewer with a WebGLRenderer, a Scene, and one View, along with a Data object. In the Scene, build a simple kitchen table SceneModel containing five SceneObjects, to represent the table top and four legs. In the Data object, build a DataModel that contains five DataObjects, which attach semantic information to the SceneModel and its SceneObjects.",
  "id": "SceneModel_DataModel_build_table",
  "type": "example",
  "visualTest": true,
  "template": "basicPage",
  "steps": [
    "Import the SDK from a bundle built for these examples",
    "Create a Scene to hold geometry and materials",
    "Create a Data to hold semantic data",
    "Create a WebGLRenderer to use the browser's WebGL API for 3D graphics",
    "Create a Viewer that draws our Scene using the WebGLRenderer. Note that the\nScene and WebGLRenderer can only be attached to one Viewer at a time.",
    "Give the Viewer a single View to render the Scene in our HTML canvas element",
    "Position the View's Camera",
    "Add a CameraControl to interactively control the View's Camera with keyboard,\nmouse and touch input",
    "Ignore this DemoHelper",
    "Create a DataModel to hold semantic information for the\nobjects in our table model",
    "Create some PropertySets in our DataModel",
    "PropertySet | SDKError",
    "Property[]",
    "PropertySet | SDKError",
    "Property[]",
    "DataObject | SDKError",
    "Create Relationships to connect the DataObjects together\nso that the DataObject that represents the table assembly aggregates\nthe other five DataObjects.",
    "Build the DataModel, making it ready for use",
    "void | SDKError",
    "DataModel built OK",
    "Create a SceneModel to hold geometry and materials",
    "Create a box-shaped SceneGeometry, which we'll reuse for the tabletop and legs.",
    "front\nright\ntop\nleft\nbottom",
    "Create SceneObjects to represent the tabletop and legs. Each SceneObject\ngets a SceneMesh that instances the SceneGeometry, configured with a color\nand a 4x4 modeling transform matrix to apply to the SceneGeometry's\nvertex positons.",
    "Build the SceneModel. The View will now contain a ViewObject for each\nSceneObject in the SceneModel.",
    "At this point, the View will contain five ViewObjects that have the same\nIDs as our SceneObjects. Through these ViewObjects, we can update the\nappearance of our model elements in that View. We'll make the yellow leg\ntranslucent, highlight the red leg and make the tabletop green.",
    "We can also apply these sorts of updates in batches, to multiple\nViewObjects at a time. The View remembers the IDs of whetever\nViewObjects we update, so we can use such batch updates to restore the\nViewObjects to their original states."
  ]
}